// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: example.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_example_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_example_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_example_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_example_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_example_2eproto;
namespace example {
class LoginRequest;
class LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class LoginResponse;
class LoginResponseDefaultTypeInternal;
extern LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
class errorInfo;
class errorInfoDefaultTypeInternal;
extern errorInfoDefaultTypeInternal _errorInfo_default_instance_;
class getFriendListRequest;
class getFriendListRequestDefaultTypeInternal;
extern getFriendListRequestDefaultTypeInternal _getFriendListRequest_default_instance_;
class getFriendListResponse;
class getFriendListResponseDefaultTypeInternal;
extern getFriendListResponseDefaultTypeInternal _getFriendListResponse_default_instance_;
class user;
class userDefaultTypeInternal;
extern userDefaultTypeInternal _user_default_instance_;
}  // namespace example
PROTOBUF_NAMESPACE_OPEN
template<> ::example::LoginRequest* Arena::CreateMaybeMessage<::example::LoginRequest>(Arena*);
template<> ::example::LoginResponse* Arena::CreateMaybeMessage<::example::LoginResponse>(Arena*);
template<> ::example::errorInfo* Arena::CreateMaybeMessage<::example::errorInfo>(Arena*);
template<> ::example::getFriendListRequest* Arena::CreateMaybeMessage<::example::getFriendListRequest>(Arena*);
template<> ::example::getFriendListResponse* Arena::CreateMaybeMessage<::example::getFriendListResponse>(Arena*);
template<> ::example::user* Arena::CreateMaybeMessage<::example::user>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace example {

enum errorInfo_errorCode : int {
  errorInfo_errorCode_NOERROR = 0,
  errorInfo_errorCode_PASSWORDINCORECT = 1,
  errorInfo_errorCode_NOSUCHUSERID = 2,
  errorInfo_errorCode_errorInfo_errorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  errorInfo_errorCode_errorInfo_errorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool errorInfo_errorCode_IsValid(int value);
constexpr errorInfo_errorCode errorInfo_errorCode_errorCode_MIN = errorInfo_errorCode_NOERROR;
constexpr errorInfo_errorCode errorInfo_errorCode_errorCode_MAX = errorInfo_errorCode_NOSUCHUSERID;
constexpr int errorInfo_errorCode_errorCode_ARRAYSIZE = errorInfo_errorCode_errorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* errorInfo_errorCode_descriptor();
template<typename T>
inline const std::string& errorInfo_errorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, errorInfo_errorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function errorInfo_errorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    errorInfo_errorCode_descriptor(), enum_t_value);
}
inline bool errorInfo_errorCode_Parse(
    const std::string& name, errorInfo_errorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<errorInfo_errorCode>(
    errorInfo_errorCode_descriptor(), name, value);
}
enum user_SEX : int {
  user_SEX_MAN = 0,
  user_SEX_WOMAN = 1,
  user_SEX_user_SEX_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  user_SEX_user_SEX_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool user_SEX_IsValid(int value);
constexpr user_SEX user_SEX_SEX_MIN = user_SEX_MAN;
constexpr user_SEX user_SEX_SEX_MAX = user_SEX_WOMAN;
constexpr int user_SEX_SEX_ARRAYSIZE = user_SEX_SEX_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* user_SEX_descriptor();
template<typename T>
inline const std::string& user_SEX_Name(T enum_t_value) {
  static_assert(::std::is_same<T, user_SEX>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function user_SEX_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    user_SEX_descriptor(), enum_t_value);
}
inline bool user_SEX_Parse(
    const std::string& name, user_SEX* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<user_SEX>(
    user_SEX_descriptor(), name, value);
}
// ===================================================================

class errorInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:example.errorInfo) */ {
 public:
  errorInfo();
  virtual ~errorInfo();

  errorInfo(const errorInfo& from);
  errorInfo(errorInfo&& from) noexcept
    : errorInfo() {
    *this = ::std::move(from);
  }

  inline errorInfo& operator=(const errorInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline errorInfo& operator=(errorInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const errorInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const errorInfo* internal_default_instance() {
    return reinterpret_cast<const errorInfo*>(
               &_errorInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(errorInfo& a, errorInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(errorInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline errorInfo* New() const final {
    return CreateMaybeMessage<errorInfo>(nullptr);
  }

  errorInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<errorInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const errorInfo& from);
  void MergeFrom(const errorInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(errorInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "example.errorInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_example_2eproto);
    return ::descriptor_table_example_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef errorInfo_errorCode errorCode;
  static constexpr errorCode NOERROR =
    errorInfo_errorCode_NOERROR;
  static constexpr errorCode PASSWORDINCORECT =
    errorInfo_errorCode_PASSWORDINCORECT;
  static constexpr errorCode NOSUCHUSERID =
    errorInfo_errorCode_NOSUCHUSERID;
  static inline bool errorCode_IsValid(int value) {
    return errorInfo_errorCode_IsValid(value);
  }
  static constexpr errorCode errorCode_MIN =
    errorInfo_errorCode_errorCode_MIN;
  static constexpr errorCode errorCode_MAX =
    errorInfo_errorCode_errorCode_MAX;
  static constexpr int errorCode_ARRAYSIZE =
    errorInfo_errorCode_errorCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  errorCode_descriptor() {
    return errorInfo_errorCode_descriptor();
  }
  template<typename T>
  static inline const std::string& errorCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, errorCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function errorCode_Name.");
    return errorInfo_errorCode_Name(enum_t_value);
  }
  static inline bool errorCode_Parse(const std::string& name,
      errorCode* value) {
    return errorInfo_errorCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 2,
    kErrcodeFieldNumber = 1,
  };
  // bytes errmsg = 2;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const void* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // .example.errorInfo.errorCode errcode = 1;
  void clear_errcode();
  ::example::errorInfo_errorCode errcode() const;
  void set_errcode(::example::errorInfo_errorCode value);
  private:
  ::example::errorInfo_errorCode _internal_errcode() const;
  void _internal_set_errcode(::example::errorInfo_errorCode value);
  public:

  // @@protoc_insertion_point(class_scope:example.errorInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  int errcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_example_2eproto;
};
// -------------------------------------------------------------------

class user :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:example.user) */ {
 public:
  user();
  virtual ~user();

  user(const user& from);
  user(user&& from) noexcept
    : user() {
    *this = ::std::move(from);
  }

  inline user& operator=(const user& from) {
    CopyFrom(from);
    return *this;
  }
  inline user& operator=(user&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const user& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const user* internal_default_instance() {
    return reinterpret_cast<const user*>(
               &_user_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(user& a, user& b) {
    a.Swap(&b);
  }
  inline void Swap(user* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline user* New() const final {
    return CreateMaybeMessage<user>(nullptr);
  }

  user* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<user>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const user& from);
  void MergeFrom(const user& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(user* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "example.user";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_example_2eproto);
    return ::descriptor_table_example_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef user_SEX SEX;
  static constexpr SEX MAN =
    user_SEX_MAN;
  static constexpr SEX WOMAN =
    user_SEX_WOMAN;
  static inline bool SEX_IsValid(int value) {
    return user_SEX_IsValid(value);
  }
  static constexpr SEX SEX_MIN =
    user_SEX_SEX_MIN;
  static constexpr SEX SEX_MAX =
    user_SEX_SEX_MAX;
  static constexpr int SEX_ARRAYSIZE =
    user_SEX_SEX_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SEX_descriptor() {
    return user_SEX_descriptor();
  }
  template<typename T>
  static inline const std::string& SEX_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SEX>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SEX_Name.");
    return user_SEX_Name(enum_t_value);
  }
  static inline bool SEX_Parse(const std::string& name,
      SEX* value) {
    return user_SEX_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAgeFieldNumber = 2,
    kSexFieldNumber = 3,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 age = 2;
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::int32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_age() const;
  void _internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .example.user.SEX sex = 3;
  void clear_sex();
  ::example::user_SEX sex() const;
  void set_sex(::example::user_SEX value);
  private:
  ::example::user_SEX _internal_sex() const;
  void _internal_set_sex(::example::user_SEX value);
  public:

  // @@protoc_insertion_point(class_scope:example.user)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 age_;
  int sex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_example_2eproto;
};
// -------------------------------------------------------------------

class LoginRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:example.LoginRequest) */ {
 public:
  LoginRequest();
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);
  LoginRequest(LoginRequest&& from) noexcept
    : LoginRequest() {
    *this = ::std::move(from);
  }

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
               &_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LoginRequest& a, LoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginRequest* New() const final {
    return CreateMaybeMessage<LoginRequest>(nullptr);
  }

  LoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "example.LoginRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_example_2eproto);
    return ::descriptor_table_example_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPwdFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string pwd = 2;
  void clear_pwd();
  const std::string& pwd() const;
  void set_pwd(const std::string& value);
  void set_pwd(std::string&& value);
  void set_pwd(const char* value);
  void set_pwd(const char* value, size_t size);
  std::string* mutable_pwd();
  std::string* release_pwd();
  void set_allocated_pwd(std::string* pwd);
  private:
  const std::string& _internal_pwd() const;
  void _internal_set_pwd(const std::string& value);
  std::string* _internal_mutable_pwd();
  public:

  // @@protoc_insertion_point(class_scope:example.LoginRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pwd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_example_2eproto;
};
// -------------------------------------------------------------------

class LoginResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:example.LoginResponse) */ {
 public:
  LoginResponse();
  virtual ~LoginResponse();

  LoginResponse(const LoginResponse& from);
  LoginResponse(LoginResponse&& from) noexcept
    : LoginResponse() {
    *this = ::std::move(from);
  }

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginResponse& operator=(LoginResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginResponse* internal_default_instance() {
    return reinterpret_cast<const LoginResponse*>(
               &_LoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LoginResponse& a, LoginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginResponse* New() const final {
    return CreateMaybeMessage<LoginResponse>(nullptr);
  }

  LoginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginResponse& from);
  void MergeFrom(const LoginResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "example.LoginResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_example_2eproto);
    return ::descriptor_table_example_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrinfoFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // .example.errorInfo errinfo = 1;
  bool has_errinfo() const;
  private:
  bool _internal_has_errinfo() const;
  public:
  void clear_errinfo();
  const ::example::errorInfo& errinfo() const;
  ::example::errorInfo* release_errinfo();
  ::example::errorInfo* mutable_errinfo();
  void set_allocated_errinfo(::example::errorInfo* errinfo);
  private:
  const ::example::errorInfo& _internal_errinfo() const;
  ::example::errorInfo* _internal_mutable_errinfo();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:example.LoginResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::example::errorInfo* errinfo_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_example_2eproto;
};
// -------------------------------------------------------------------

class getFriendListRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:example.getFriendListRequest) */ {
 public:
  getFriendListRequest();
  virtual ~getFriendListRequest();

  getFriendListRequest(const getFriendListRequest& from);
  getFriendListRequest(getFriendListRequest&& from) noexcept
    : getFriendListRequest() {
    *this = ::std::move(from);
  }

  inline getFriendListRequest& operator=(const getFriendListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getFriendListRequest& operator=(getFriendListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getFriendListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const getFriendListRequest* internal_default_instance() {
    return reinterpret_cast<const getFriendListRequest*>(
               &_getFriendListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(getFriendListRequest& a, getFriendListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getFriendListRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getFriendListRequest* New() const final {
    return CreateMaybeMessage<getFriendListRequest>(nullptr);
  }

  getFriendListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getFriendListRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getFriendListRequest& from);
  void MergeFrom(const getFriendListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getFriendListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "example.getFriendListRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_example_2eproto);
    return ::descriptor_table_example_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // int32 userId = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:example.getFriendListRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_example_2eproto;
};
// -------------------------------------------------------------------

class getFriendListResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:example.getFriendListResponse) */ {
 public:
  getFriendListResponse();
  virtual ~getFriendListResponse();

  getFriendListResponse(const getFriendListResponse& from);
  getFriendListResponse(getFriendListResponse&& from) noexcept
    : getFriendListResponse() {
    *this = ::std::move(from);
  }

  inline getFriendListResponse& operator=(const getFriendListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getFriendListResponse& operator=(getFriendListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getFriendListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const getFriendListResponse* internal_default_instance() {
    return reinterpret_cast<const getFriendListResponse*>(
               &_getFriendListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(getFriendListResponse& a, getFriendListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getFriendListResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getFriendListResponse* New() const final {
    return CreateMaybeMessage<getFriendListResponse>(nullptr);
  }

  getFriendListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getFriendListResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getFriendListResponse& from);
  void MergeFrom(const getFriendListResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getFriendListResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "example.getFriendListResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_example_2eproto);
    return ::descriptor_table_example_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendListFieldNumber = 2,
    kErrInfoFieldNumber = 1,
  };
  // repeated .example.user friendList = 2;
  int friendlist_size() const;
  private:
  int _internal_friendlist_size() const;
  public:
  void clear_friendlist();
  ::example::user* mutable_friendlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::user >*
      mutable_friendlist();
  private:
  const ::example::user& _internal_friendlist(int index) const;
  ::example::user* _internal_add_friendlist();
  public:
  const ::example::user& friendlist(int index) const;
  ::example::user* add_friendlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::user >&
      friendlist() const;

  // .example.errorInfo errInfo = 1;
  bool has_errinfo() const;
  private:
  bool _internal_has_errinfo() const;
  public:
  void clear_errinfo();
  const ::example::errorInfo& errinfo() const;
  ::example::errorInfo* release_errinfo();
  ::example::errorInfo* mutable_errinfo();
  void set_allocated_errinfo(::example::errorInfo* errinfo);
  private:
  const ::example::errorInfo& _internal_errinfo() const;
  ::example::errorInfo* _internal_mutable_errinfo();
  public:

  // @@protoc_insertion_point(class_scope:example.getFriendListResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::user > friendlist_;
  ::example::errorInfo* errinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_example_2eproto;
};
// ===================================================================

class UserServicesRpc_Stub;

class UserServicesRpc : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline UserServicesRpc() {};
 public:
  virtual ~UserServicesRpc();

  typedef UserServicesRpc_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void Login(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::example::LoginRequest* request,
                       ::example::LoginResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void getFriendList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::example::getFriendListRequest* request,
                       ::example::getFriendListResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UserServicesRpc);
};

class UserServicesRpc_Stub : public UserServicesRpc {
 public:
  UserServicesRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  UserServicesRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~UserServicesRpc_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements UserServicesRpc ------------------------------------------

  void Login(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::example::LoginRequest* request,
                       ::example::LoginResponse* response,
                       ::google::protobuf::Closure* done);
  void getFriendList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::example::getFriendListRequest* request,
                       ::example::getFriendListResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UserServicesRpc_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// errorInfo

// .example.errorInfo.errorCode errcode = 1;
inline void errorInfo::clear_errcode() {
  errcode_ = 0;
}
inline ::example::errorInfo_errorCode errorInfo::_internal_errcode() const {
  return static_cast< ::example::errorInfo_errorCode >(errcode_);
}
inline ::example::errorInfo_errorCode errorInfo::errcode() const {
  // @@protoc_insertion_point(field_get:example.errorInfo.errcode)
  return _internal_errcode();
}
inline void errorInfo::_internal_set_errcode(::example::errorInfo_errorCode value) {
  
  errcode_ = value;
}
inline void errorInfo::set_errcode(::example::errorInfo_errorCode value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:example.errorInfo.errcode)
}

// bytes errmsg = 2;
inline void errorInfo::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& errorInfo::errmsg() const {
  // @@protoc_insertion_point(field_get:example.errorInfo.errmsg)
  return _internal_errmsg();
}
inline void errorInfo::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:example.errorInfo.errmsg)
}
inline std::string* errorInfo::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:example.errorInfo.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& errorInfo::_internal_errmsg() const {
  return errmsg_.GetNoArena();
}
inline void errorInfo::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void errorInfo::set_errmsg(std::string&& value) {
  
  errmsg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:example.errorInfo.errmsg)
}
inline void errorInfo::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:example.errorInfo.errmsg)
}
inline void errorInfo::set_errmsg(const void* value, size_t size) {
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:example.errorInfo.errmsg)
}
inline std::string* errorInfo::_internal_mutable_errmsg() {
  
  return errmsg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* errorInfo::release_errmsg() {
  // @@protoc_insertion_point(field_release:example.errorInfo.errmsg)
  
  return errmsg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void errorInfo::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:example.errorInfo.errmsg)
}

// -------------------------------------------------------------------

// user

// bytes name = 1;
inline void user::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& user::name() const {
  // @@protoc_insertion_point(field_get:example.user.name)
  return _internal_name();
}
inline void user::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:example.user.name)
}
inline std::string* user::mutable_name() {
  // @@protoc_insertion_point(field_mutable:example.user.name)
  return _internal_mutable_name();
}
inline const std::string& user::_internal_name() const {
  return name_.GetNoArena();
}
inline void user::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void user::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:example.user.name)
}
inline void user::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:example.user.name)
}
inline void user::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:example.user.name)
}
inline std::string* user::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* user::release_name() {
  // @@protoc_insertion_point(field_release:example.user.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void user::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:example.user.name)
}

// int32 age = 2;
inline void user::clear_age() {
  age_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user::_internal_age() const {
  return age_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user::age() const {
  // @@protoc_insertion_point(field_get:example.user.age)
  return _internal_age();
}
inline void user::_internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  age_ = value;
}
inline void user::set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:example.user.age)
}

// .example.user.SEX sex = 3;
inline void user::clear_sex() {
  sex_ = 0;
}
inline ::example::user_SEX user::_internal_sex() const {
  return static_cast< ::example::user_SEX >(sex_);
}
inline ::example::user_SEX user::sex() const {
  // @@protoc_insertion_point(field_get:example.user.sex)
  return _internal_sex();
}
inline void user::_internal_set_sex(::example::user_SEX value) {
  
  sex_ = value;
}
inline void user::set_sex(::example::user_SEX value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:example.user.sex)
}

// -------------------------------------------------------------------

// LoginRequest

// string name = 1;
inline void LoginRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginRequest::name() const {
  // @@protoc_insertion_point(field_get:example.LoginRequest.name)
  return _internal_name();
}
inline void LoginRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:example.LoginRequest.name)
}
inline std::string* LoginRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:example.LoginRequest.name)
  return _internal_mutable_name();
}
inline const std::string& LoginRequest::_internal_name() const {
  return name_.GetNoArena();
}
inline void LoginRequest::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:example.LoginRequest.name)
}
inline void LoginRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:example.LoginRequest.name)
}
inline void LoginRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:example.LoginRequest.name)
}
inline std::string* LoginRequest::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginRequest::release_name() {
  // @@protoc_insertion_point(field_release:example.LoginRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:example.LoginRequest.name)
}

// string pwd = 2;
inline void LoginRequest::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginRequest::pwd() const {
  // @@protoc_insertion_point(field_get:example.LoginRequest.pwd)
  return _internal_pwd();
}
inline void LoginRequest::set_pwd(const std::string& value) {
  _internal_set_pwd(value);
  // @@protoc_insertion_point(field_set:example.LoginRequest.pwd)
}
inline std::string* LoginRequest::mutable_pwd() {
  // @@protoc_insertion_point(field_mutable:example.LoginRequest.pwd)
  return _internal_mutable_pwd();
}
inline const std::string& LoginRequest::_internal_pwd() const {
  return pwd_.GetNoArena();
}
inline void LoginRequest::_internal_set_pwd(const std::string& value) {
  
  pwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginRequest::set_pwd(std::string&& value) {
  
  pwd_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:example.LoginRequest.pwd)
}
inline void LoginRequest::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:example.LoginRequest.pwd)
}
inline void LoginRequest::set_pwd(const char* value, size_t size) {
  
  pwd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:example.LoginRequest.pwd)
}
inline std::string* LoginRequest::_internal_mutable_pwd() {
  
  return pwd_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginRequest::release_pwd() {
  // @@protoc_insertion_point(field_release:example.LoginRequest.pwd)
  
  return pwd_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_pwd(std::string* pwd) {
  if (pwd != nullptr) {
    
  } else {
    
  }
  pwd_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:example.LoginRequest.pwd)
}

// -------------------------------------------------------------------

// LoginResponse

// .example.errorInfo errinfo = 1;
inline bool LoginResponse::_internal_has_errinfo() const {
  return this != internal_default_instance() && errinfo_ != nullptr;
}
inline bool LoginResponse::has_errinfo() const {
  return _internal_has_errinfo();
}
inline void LoginResponse::clear_errinfo() {
  if (GetArenaNoVirtual() == nullptr && errinfo_ != nullptr) {
    delete errinfo_;
  }
  errinfo_ = nullptr;
}
inline const ::example::errorInfo& LoginResponse::_internal_errinfo() const {
  const ::example::errorInfo* p = errinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::example::errorInfo*>(
      &::example::_errorInfo_default_instance_);
}
inline const ::example::errorInfo& LoginResponse::errinfo() const {
  // @@protoc_insertion_point(field_get:example.LoginResponse.errinfo)
  return _internal_errinfo();
}
inline ::example::errorInfo* LoginResponse::release_errinfo() {
  // @@protoc_insertion_point(field_release:example.LoginResponse.errinfo)
  
  ::example::errorInfo* temp = errinfo_;
  errinfo_ = nullptr;
  return temp;
}
inline ::example::errorInfo* LoginResponse::_internal_mutable_errinfo() {
  
  if (errinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::example::errorInfo>(GetArenaNoVirtual());
    errinfo_ = p;
  }
  return errinfo_;
}
inline ::example::errorInfo* LoginResponse::mutable_errinfo() {
  // @@protoc_insertion_point(field_mutable:example.LoginResponse.errinfo)
  return _internal_mutable_errinfo();
}
inline void LoginResponse::set_allocated_errinfo(::example::errorInfo* errinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete errinfo_;
  }
  if (errinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      errinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errinfo, submessage_arena);
    }
    
  } else {
    
  }
  errinfo_ = errinfo;
  // @@protoc_insertion_point(field_set_allocated:example.LoginResponse.errinfo)
}

// bool success = 2;
inline void LoginResponse::clear_success() {
  success_ = false;
}
inline bool LoginResponse::_internal_success() const {
  return success_;
}
inline bool LoginResponse::success() const {
  // @@protoc_insertion_point(field_get:example.LoginResponse.success)
  return _internal_success();
}
inline void LoginResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void LoginResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:example.LoginResponse.success)
}

// -------------------------------------------------------------------

// getFriendListRequest

// int32 userId = 1;
inline void getFriendListRequest::clear_userid() {
  userid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getFriendListRequest::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getFriendListRequest::userid() const {
  // @@protoc_insertion_point(field_get:example.getFriendListRequest.userId)
  return _internal_userid();
}
inline void getFriendListRequest::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  userid_ = value;
}
inline void getFriendListRequest::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:example.getFriendListRequest.userId)
}

// -------------------------------------------------------------------

// getFriendListResponse

// .example.errorInfo errInfo = 1;
inline bool getFriendListResponse::_internal_has_errinfo() const {
  return this != internal_default_instance() && errinfo_ != nullptr;
}
inline bool getFriendListResponse::has_errinfo() const {
  return _internal_has_errinfo();
}
inline void getFriendListResponse::clear_errinfo() {
  if (GetArenaNoVirtual() == nullptr && errinfo_ != nullptr) {
    delete errinfo_;
  }
  errinfo_ = nullptr;
}
inline const ::example::errorInfo& getFriendListResponse::_internal_errinfo() const {
  const ::example::errorInfo* p = errinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::example::errorInfo*>(
      &::example::_errorInfo_default_instance_);
}
inline const ::example::errorInfo& getFriendListResponse::errinfo() const {
  // @@protoc_insertion_point(field_get:example.getFriendListResponse.errInfo)
  return _internal_errinfo();
}
inline ::example::errorInfo* getFriendListResponse::release_errinfo() {
  // @@protoc_insertion_point(field_release:example.getFriendListResponse.errInfo)
  
  ::example::errorInfo* temp = errinfo_;
  errinfo_ = nullptr;
  return temp;
}
inline ::example::errorInfo* getFriendListResponse::_internal_mutable_errinfo() {
  
  if (errinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::example::errorInfo>(GetArenaNoVirtual());
    errinfo_ = p;
  }
  return errinfo_;
}
inline ::example::errorInfo* getFriendListResponse::mutable_errinfo() {
  // @@protoc_insertion_point(field_mutable:example.getFriendListResponse.errInfo)
  return _internal_mutable_errinfo();
}
inline void getFriendListResponse::set_allocated_errinfo(::example::errorInfo* errinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete errinfo_;
  }
  if (errinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      errinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errinfo, submessage_arena);
    }
    
  } else {
    
  }
  errinfo_ = errinfo;
  // @@protoc_insertion_point(field_set_allocated:example.getFriendListResponse.errInfo)
}

// repeated .example.user friendList = 2;
inline int getFriendListResponse::_internal_friendlist_size() const {
  return friendlist_.size();
}
inline int getFriendListResponse::friendlist_size() const {
  return _internal_friendlist_size();
}
inline void getFriendListResponse::clear_friendlist() {
  friendlist_.Clear();
}
inline ::example::user* getFriendListResponse::mutable_friendlist(int index) {
  // @@protoc_insertion_point(field_mutable:example.getFriendListResponse.friendList)
  return friendlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::user >*
getFriendListResponse::mutable_friendlist() {
  // @@protoc_insertion_point(field_mutable_list:example.getFriendListResponse.friendList)
  return &friendlist_;
}
inline const ::example::user& getFriendListResponse::_internal_friendlist(int index) const {
  return friendlist_.Get(index);
}
inline const ::example::user& getFriendListResponse::friendlist(int index) const {
  // @@protoc_insertion_point(field_get:example.getFriendListResponse.friendList)
  return _internal_friendlist(index);
}
inline ::example::user* getFriendListResponse::_internal_add_friendlist() {
  return friendlist_.Add();
}
inline ::example::user* getFriendListResponse::add_friendlist() {
  // @@protoc_insertion_point(field_add:example.getFriendListResponse.friendList)
  return _internal_add_friendlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::user >&
getFriendListResponse::friendlist() const {
  // @@protoc_insertion_point(field_list:example.getFriendListResponse.friendList)
  return friendlist_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace example

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::example::errorInfo_errorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::example::errorInfo_errorCode>() {
  return ::example::errorInfo_errorCode_descriptor();
}
template <> struct is_proto_enum< ::example::user_SEX> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::example::user_SEX>() {
  return ::example::user_SEX_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_example_2eproto
